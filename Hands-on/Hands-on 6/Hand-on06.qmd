---
title: "Hands-On 5"
author: "Abhishek Singh"
published: "`May 28 2023`"
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
---

\*\* Modelling, Visualising and Analysing Network Data with R\*\*

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

```{r}
glimpse(GAStech_edges)
```

::: callout-warning
The output report of GAStech_edges above reveals that the SentDate is treated as "Character" data type instead of date data type
:::

```{r}
glimpse(GAStech_nodes)
```

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

::: callout-tip
-   both dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.
-   dmy() transforms the SentDate to Date data type.
-   wday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field. the values in the Weekday field are in ordinal scale.
:::

**Wrangling attributes**

we will aggregate the individual by date, senders, receivers, main subject and day of the week

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

```{r}
glimpse(GAStech_edges_aggregated)
```

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

```{r}
GAStech_graph
```

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

**Plotting a basic network graph**

```{r}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

**Fruchterman and Reingold layout**

```{r}
g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```
