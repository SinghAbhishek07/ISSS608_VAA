[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on/Hands-on 1/Hand-on1.html",
    "href": "Hands-on/Hands-on 1/Hand-on1.html",
    "title": "Hand-on1",
    "section": "",
    "text": "pacman::p_load(tidyverse,dplyr)"
  },
  {
    "objectID": "Hands-on/Hands-on 1/Hand-on1.html#essential-grammatical-elements-in-ggplot2",
    "href": "Hands-on/Hands-on 1/Hand-on1.html#essential-grammatical-elements-in-ggplot2",
    "title": "Hand-on1",
    "section": "Essential Grammatical Elements in ggplot2",
    "text": "Essential Grammatical Elements in ggplot2\nA Layered Grammar of Graphics\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\nNotice that a blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by `fortify()"
  },
  {
    "objectID": "Hands-on/Hands-on 1/Hand-on1.html#essential-grammatical-elements-in-ggplot2-1",
    "href": "Hands-on/Hands-on 1/Hand-on1.html#essential-grammatical-elements-in-ggplot2-1",
    "title": "Hand-on1",
    "section": "Essential Grammatical Elements in ggplot2",
    "text": "Essential Grammatical Elements in ggplot2\n\nGeometric Objects: [geom_bar]\n\nPLotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nGeometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\n\n\n\n\n\nNotes\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5, dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\nGeometric Objects: geom_histogram()\nIn the code chunk below, [geom_histogram()] is used to create a simple histogram by using values in MATHS field of exam_data.\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\nModifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\") \n\n\n\n\n\n\nModifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\nGeometric Objects: geom-density\n[geom-density()]computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\nGeometric Objects: geom_boxplot\n\n[geom_boxplot()]displays continuous value list.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot() \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\ngeom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\nGeometric Objects: geom_violin\n[geom_violin] is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin() \n\n\n\n\n\n\nGeometric Objects: geom_violin() and geom_boxplot()\nThe code chunk below combined a violin plot and a boxplot to show the distribution of Maths scores by gender.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(fill=\"light blue\") +\n  geom_boxplot(alpha=0.5)  \n\n\n\n\n\n\nGeometric Objects: geom_point()\n\n[geom_point()] is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nStatistics, stat\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nWorking with stat - the stat_summary() method\nThe code chunk below adds mean values by using [stat_summary()] function and overriding the default geom.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)   \n\n\n\n\n\n\nWorking with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)   \n\n\n\n\n\n\nHow to add a best fit curve on a scatterplot?\nIn the code chunk below, [geom_smooth()] is used to plot a best fit curve on the scatterplot.\n\nThe default method used is loess.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on/Hands-on 1/Hand-on1.html#facets",
    "href": "Hands-on/Hands-on 1/Hand-on1.html#facets",
    "title": "Hand-on1",
    "section": "Facets",
    "text": "Facets\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.\nFacets are an alternative to aesthetics for displaying additional discrete variables.\nggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap()\n\n[facet_wrap] wraps a 1d sequence of panels into 2d.\nThis is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nThe code chunk below plots a trellis plot using facet-wrap().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\nfacet_grid() function\n\n[facet_grid()] forms a matrix of panels defined by row and column facetting variables.\nIt is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\nThe code chunk below plots a trellis plot using facet_grid().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\nCoordinates\n\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use, they are:\n\n[coord_cartesian()]: the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n\n[coord_fixed()]: a cartesian system with a “fixed” aspect ratio .\n[coord_quickmap()](: a coordinate system that approximates a good aspect ratio for maps.\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\nHow to change to the y- and x-axis range?\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\nThemes\n\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include:\n\ntheme_gray() (default)\ntheme_bw()\ntheme_classic()\n\nA list of theme can be found at this link.\nEach theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\nThe code chunk below plot a horizontal bar chart using theme_gray()\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on/Hands-on 2/Hand-on2.html",
    "href": "Hands-on/Hands-on 2/Hand-on2.html",
    "title": "Hand-on2",
    "section": "",
    "text": "4 new packages beside tidyverse.\n\nggrepel: an R package provides geoms for ggplot2 to repel - overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on/Hands-on 2/Hand-on2.html#importing-data",
    "href": "Hands-on/Hands-on 2/Hand-on2.html#importing-data",
    "title": "Hand-on2",
    "section": "Importing data",
    "text": "Importing data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on/Hands-on 2/Hand-on2.html#beyond-ggplot2-annotation",
    "href": "Hands-on/Hands-on 2/Hand-on2.html#beyond-ggplot2-annotation",
    "title": "Hand-on2",
    "section": "Beyond ggplot2 Annotation",
    "text": "Beyond ggplot2 Annotation\n\nggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n[ggrepel] is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right. We simply replace geom_text() by [geom_text_repel()] and geom_label() by [geom_label_repel]\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on/Hands-on 2/Hand-on2.html#ggplot2-themes",
    "href": "Hands-on/Hands-on 2/Hand-on2.html#ggplot2-themes",
    "title": "Hand-on2",
    "section": "ggplot2 Themes",
    "text": "ggplot2 Themes\nggplot2 comes with eight [built-in themes], they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\nWorking with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\nWorking with hrbthems package\n[hrbrthemes] package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"Y\") \n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk below?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on/Hands-on 2/Hand-on2.html#combining-graphs",
    "href": "Hands-on/Hands-on 2/Hand-on2.html#combining-graphs",
    "title": "Hand-on2",
    "section": "Combining Graphs",
    "text": "Combining Graphs\nIn this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics.\n\nPlotCode\n\n\n\n\n\n\n\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nWorking with patchwork\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np1 + p2 / p3\n\n\n\n\n| will place the plots beside each other, while / will stack them.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\npatchwork also provides auto-tagging capabilities, in order to identify subplots in text:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "In-class Exercise/In-class 1/In-Class1.html",
    "href": "In-class Exercise/In-class 1/In-Class1.html",
    "title": "In-Class1",
    "section": "",
    "text": "Loading Tidyverse\nImporting data"
  },
  {
    "objectID": "In-class Exercise/In-class 1/In-Class1.html#working-with-theme",
    "href": "In-class Exercise/In-class 1/In-Class1.html#working-with-theme",
    "title": "In-Class1",
    "section": "Working with theme",
    "text": "Working with theme\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"lightblue\", colour = \"lightblue\", \n                                    size = 0.5, linetype = \"solid\"),\n    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = \"white\"), \n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"white\"))"
  },
  {
    "objectID": "In-class Exercise/In-class 1/In-Class1.html#designing-data-drive-graphics-for-analysis-i",
    "href": "In-class Exercise/In-class 1/In-Class1.html#designing-data-drive-graphics-for-analysis-i",
    "title": "In-Class1",
    "section": "Designing Data-drive Graphics for Analysis I",
    "text": "Designing Data-drive Graphics for Analysis I\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=reorder(RACE,RACE,\n                     function(x)-length(x)))) +\n  geom_bar() +\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100, 1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\nThis code chunk uses fct_infreq() of forcats package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class Exercise/In-class 1/In-Class1.html#designing-data-drive-graphics-for-analysis-ii",
    "href": "In-class Exercise/In-class 1/In-Class1.html#designing-data-drive-graphics-for-analysis-ii",
    "title": "In-Class1",
    "section": "Designing Data-drive Graphics for Analysis II",
    "text": "Designing Data-drive Graphics for Analysis II\n\nAdding mean and median lines on the histogram plot.\nChange fill color and line color\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=1) +\n  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             size=1)"
  },
  {
    "objectID": "In-class Exercise/In-class 1/In-Class1.html#designing-data-drive-graphics-for-analysis-iii",
    "href": "In-class Exercise/In-class 1/In-Class1.html#designing-data-drive-graphics-for-analysis-iii",
    "title": "In-Class1",
    "section": "Designing Data-drive Graphics for Analysis III",
    "text": "Designing Data-drive Graphics for Analysis III\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = 'none') +  \n  theme_bw()"
  },
  {
    "objectID": "In-class Exercise/In-class 1/In-Class1.html#designing-data-drive-graphics-for-analysis-iv",
    "href": "In-class Exercise/In-class 1/In-Class1.html#designing-data-drive-graphics-for-analysis-iv",
    "title": "In-Class1",
    "section": "Designing Data-drive Graphics for Analysis IV",
    "text": "Designing Data-drive Graphics for Analysis IV\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1)"
  },
  {
    "objectID": "In-class Exercise/In-class 1/In-Class1.html#tableau",
    "href": "In-class Exercise/In-class 1/In-Class1.html#tableau",
    "title": "In-Class1",
    "section": "Tableau",
    "text": "Tableau\nLinks to Tableau Visualisations:\nSuperstore Orders"
  },
  {
    "objectID": "In-class Exercise/In-class 4/In-Class4.html",
    "href": "In-class Exercise/In-class 4/In-Class4.html",
    "title": "In_ClassExercise4",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse)\n\n\nexam_data<-read_csv(\"data/Exam_data.csv\")\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample=ENGLISH))+\n  stat_qq() +\n  stat_qq_line()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that the points deviate significantly from the straight diagonal line. This is a clear inidcation that the set of data is not normally distributed.\n\n\n\nComibining statistical graph and analysis table\nNeed to install webshot"
  },
  {
    "objectID": "In-class Exercise/In-class 5/In-Class5.html",
    "href": "In-class Exercise/In-class 5/In-Class5.html",
    "title": "In-Class5",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts,jsonlite)\n\n\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     <ord> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n\n\n\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 1,372 × 4\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# ℹ 1,366 more rows\n#\n# A tibble: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\ng <- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\nMC1 <- fromJSON(\"data/MC1.json\")\n\n\nMC1_nodes <- as.tibble(MC1$nodes) %>%\n  select(id,type,country)\n\n\nMC1_edges <- as.tibble(MC1$links) %>%\n  select(source,target,type,weight,key)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Abhishek’s Visual Data Visualization",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 1/Take-home_Ex01/Takehome1.html",
    "href": "Takehome Exercise/Takehome Ex 1/Take-home_Ex01/Takehome1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The City of Engagement, a small city located in the Country of Nowhere, serves as a service center for an agriculture region known for its fruit farms and vineyards. The local council is currently preparing the Local Plan 2023, and they have conducted a sample survey of 1000 representative residents to gather data on household demographics and spending patterns. This exercise aims to uncover insights into the city’s demographic and financial characteristics. The goal is to provide city managers and planners with a user-friendly and interactive solution that allows them to explore the complex data and identify hidden patterns."
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 1/Take-home_Ex01/Takehome1.html#objective",
    "href": "Takehome Exercise/Takehome Ex 1/Take-home_Ex01/Takehome1.html#objective",
    "title": "Take-home Exercise 1",
    "section": "Objective",
    "text": "Objective\nThe objective of this exercise is to use the tidyverse family of packages, including ggplot2 and its extensions, to process the survey data and create appropriate static and interactive statistical graphics. By using this, I aim to\n\nExplore the distribution of joviality among the participants and identify any patterns or trends.\nAnalyze the demographic characteristics of the City of Engagement\nInvestigate whether there is a correlation between joviality and financial behavior. Are participants with higher joviality more likely to spend or save money?\n\nThe city wants to use the information to help with its significant community development initiatives, particularly how to distribute a sizable grant for city renewal that it recently received it. This would make it possible for urban planners to concentrate their efforts on particular regions of the community to raise population merriment generally."
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 1/Take-home_Ex01/Takehome1.html#data-preparation",
    "href": "Takehome Exercise/Takehome Ex 1/Take-home_Ex01/Takehome1.html#data-preparation",
    "title": "Take-home Exercise 1",
    "section": "1. Data Preparation",
    "text": "1. Data Preparation\n\n1.1 Install R packages and import dataset\nThe code chunk below uses pacman::p_load() to check if packages are installed. If they are, they will be launched into R. The packages installed are\n\nplotly: Used for creating interactive web-based graphs.\nggstatsplot: Used for creating graphics with details from statistical tests.\nknitr: Used for dynamic report generation\npacthwork: Used to combine plots\nggdist: Used for visualising distribution and uncertainty\nggthemes: Provide additional themes for ggplot2\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nrstatix: used for data manipulation, summarization, and group-wise comparisons\nHmisc : used to compute descriptive statistics for a variable in a dataset\nDT : DataTables that create interactive table on html page.\nsummarytools- used for creating summary statistics and tables for data exploration and reporting\nkableExtra- is used for creating tables in various output formats, such as HTML, PDF, or Word documents.\nAll packages can be found within CRAN.\n\npacman::p_load() function from the pacman package is used in the following code chunk to install and call the libraries of multiple R packages:\n\n#Load packages\npacman::p_load(plotly, ggstatsplot, knitr, patchwork, ggdist, ggthemes, tidyverse,rstatix,Hmisc, DT ,summarytools,kableExtra )\n\n\n\n1.2 Importing data sets\nTwo datasets are provided: Participants.csv and FinancialJournal.csv.\nI used them as resident_info and financial respectively.\n\n1.2.1 Working with Participants dataset\nImport data from csv using readr::read_csv() and store it in variable resident_info.\nreadr is one of the tidyverse package.\n\nresident_info <- read_csv(\"data/Participants.csv\")\n\n\nDatatableStructureSummary StataticsSummary Table\n\n\nDisplaying the datatable using the DT package\n\nDT::datatable(resident_info, class= \"compact\", filter='top')\n\n\n\n\n\n\n\n\nIt used to provide a compact and structured summary of the internal structure\n\nstr(resident_info)\n\nspc_tbl_ [1,011 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId : num [1:1011] 0 1 2 3 4 5 6 7 8 9 ...\n $ householdSize : num [1:1011] 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: chr [1:1011] \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   householdSize = col_double(),\n  ..   haveKids = col_logical(),\n  ..   age = col_double(),\n  ..   educationLevel = col_character(),\n  ..   interestGroup = col_character(),\n  ..   joviality = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nThere are a total of 1011 rows and 7 variables. The output reveals that variables participantId and householdSize have been read as numeric, continuous data types, and it should changed as nominal data instead because participantId serve as unique identifiers and householdSize represent discrete categories such as 1, 2, 3.\n\n\nIt provides a summary of the variables in the data frame, including their distribution, range, and missing values. This includes measures such as count, mean, standard deviation, minimum, maximum, and quartiles.\n\nHmisc::describe(resident_info)\n\nresident_info \n\n 7  Variables      1011  Observations\n--------------------------------------------------------------------------------\nparticipantId \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n    1011        0     1011        1      505    337.3     50.5    101.0 \n     .25      .50      .75      .90      .95 \n   252.5    505.0    757.5    909.0    959.5 \n\nlowest :    0    1    2    3    4, highest: 1006 1007 1008 1009 1010\n--------------------------------------------------------------------------------\nhouseholdSize \n       n  missing distinct     Info     Mean      Gmd \n    1011        0        3    0.886    1.964   0.8635 \n                            \nValue          1     2     3\nFrequency    337   373   301\nProportion 0.333 0.369 0.298\n--------------------------------------------------------------------------------\nhaveKids \n       n  missing distinct \n    1011        0        2 \n                      \nValue      FALSE  TRUE\nFrequency    710   301\nProportion 0.702 0.298\n--------------------------------------------------------------------------------\nage \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n    1011        0       43    0.999    39.07     14.3       20       22 \n     .25      .50      .75      .90      .95 \n      29       39       50       56       58 \n\nlowest : 18 19 20 21 22, highest: 56 57 58 59 60\n--------------------------------------------------------------------------------\neducationLevel \n       n  missing distinct \n    1011        0        4 \n                                                                      \nValue                Bachelors            Graduate HighSchoolOrCollege\nFrequency                  232                 170                 525\nProportion               0.229               0.168               0.519\n                              \nValue                      Low\nFrequency                   84\nProportion               0.083\n--------------------------------------------------------------------------------\ninterestGroup \n       n  missing distinct \n    1011        0       10 \n\nlowest : A B C D E, highest: F G H I J\n                                                                      \nValue          A     B     C     D     E     F     G     H     I     J\nFrequency    102    91   102    96    83   106   108   111    96   116\nProportion 0.101 0.090 0.101 0.095 0.082 0.105 0.107 0.110 0.095 0.115\n--------------------------------------------------------------------------------\njoviality \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n    1011        0     1011        1   0.4938   0.3364  0.05642  0.10871 \n     .25      .50      .75      .90      .95 \n 0.24007  0.47754  0.74682  0.90645  0.96024 \n\nlowest : 0.000204000 0.000265000 0.000985000 0.001365799 0.001626703\nhighest: 0.992601749 0.997604884 0.997670843 0.998644049 0.999233967\n--------------------------------------------------------------------------------\n\n\nFrom the output, there are zero missing values across all columns in resident_info\n\n\n\n\n\n\nNotes\n\n\n\nThe describe() function provides summary statistics for numerical variables by default. If we need to include categorical variables as well, it can set the fast = FALSE argument Hmisc::describe(resident_info, fast = FALSE)\nBy setting fast = FALSE, the describe() function will calculate summary statistics for both numerical and categorical variables in the resident_info data frame.\n\n\n\n\nCreating detailed summary table\n\ndf1 <- resident_info %>% \n  select(-starts_with('Q'), -starts_with('HQ')) %>%\n  mutate_if(is.integer, as.numeric) %>%\n  mutate_if(is.logical, as.numeric)\n\nflat_numeric <- df1 %>% select_if(is.numeric)\n\nprint(dfSummary(flat_numeric, graph.magnif = 0.75), method = 'render')\n\n\n\nData Frame Summary\nflat_numeric\nDimensions: 1011 x 5\n  Duplicates: 0\n\n\n  \n    \n      No\n      Variable\n      Stats / Values\n      Freqs (% of Valid)\n      Graph\n      Valid\n      Missing\n    \n  \n  \n    \n      1\n      participantId\n[numeric]\n      Mean (sd) : 505 (292)min ≤ med ≤ max:0 ≤ 505 ≤ 1010IQR (CV) : 505 (0.6)\n      1011 distinct values\n      \n      1011\n(100.0%)\n      0\n(0.0%)\n    \n    \n      2\n      householdSize\n[numeric]\n      Mean (sd) : 2 (0.8)min ≤ med ≤ max:1 ≤ 2 ≤ 3IQR (CV) : 2 (0.4)\n      1:337(33.3%)2:373(36.9%)3:301(29.8%)\n      \n      1011\n(100.0%)\n      0\n(0.0%)\n    \n    \n      3\n      haveKids\n[numeric]\n      Min  : 0Mean : 0.3Max  : 1\n      0:710(70.2%)1:301(29.8%)\n      \n      1011\n(100.0%)\n      0\n(0.0%)\n    \n    \n      4\n      age\n[numeric]\n      Mean (sd) : 39.1 (12.4)min ≤ med ≤ max:18 ≤ 39 ≤ 60IQR (CV) : 21 (0.3)\n      43 distinct values\n      \n      1011\n(100.0%)\n      0\n(0.0%)\n    \n    \n      5\n      joviality\n[numeric]\n      Mean (sd) : 0.5 (0.3)min ≤ med ≤ max:0 ≤ 0.5 ≤ 1IQR (CV) : 0.5 (0.6)\n      1011 distinct values\n      \n      1011\n(100.0%)\n      0\n(0.0%)\n    \n  \n\nGenerated by summarytools 1.0.1 (R version 4.2.3)2023-05-13\n\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\nBased on the statistics from the summary table, below are some useful insights:\n\nparticipantId: There are 1,011 unique participant IDs. The range of IDs is from 0 to 1,010, indicating that there are no missing or duplicated IDs.\nhouseholdSize: The data contains three distinct household sizes: 1, 2, and 3. The most common household size is 2, followed by 1 and then 3. The proportions indicate that 33.3% of the households have a size of 1, 36.9% have a size of 2, and 29.8% have a size of 3.\nhaveKids: There are two distinct values: FALSE and TRUE. The majority of participants (70.2%) do not have kids, while 29.8% have kids.\nage: The data includes 43 distinct ages, ranging from 18 to 60. The mean age is approximately 39 years, with a standard deviation of 14.3. The 5th percentile is 20, the median is 39, and the 95th percentile is 58.\neducationLevel: There are four distinct education levels: Bachelors, Graduate, HighSchoolOrCollege, and Low. The majority of participants (51.9%) have a HighSchoolOrCollege education level, followed by Bachelors (22.9%), Graduate (16.8%), and Low (8.3%).\ninterestGroup: There are 10 distinct interest groups labeled from A to J. The frequencies and proportions indicate the distribution of participants across these interest groups.\njoviality: Joviality is a numeric variable ranging from 0 to 1. The mean joviality score is approximately 0.494, with a standard deviation of 0.3364. The 5th percentile is 0.05642, the median is 0.47754, and the 95th percentile is 0.96024.\n\n\n\n\nChanging Data Types:\n\nparticipantId is classified as <dbl>, numerical continuous data, instead of nominal. This is cast as <chr> class using as.factor()\nhouseholdSize is classified as <dbl>, but categorical in nature with different levels. This is cast as <chr> class using `as.factor()\neducationLevel is classified as <chr  > categorical data,which has 4 different category. It need to be changed using ordered() function.\n\n\n\nChanging data typeChecking the changes\n\n\n\nresident_new <- resident_info %>%\n# Changing Data Types of participantsID , household, educationlevel\n   mutate(participantId = as.factor(participantId),\n         householdSize = as.factor(householdSize),\n         educationLevel = as.ordered(educationLevel))\n\n\n\n\n# Check the data types of variables\nstr(resident_new)\n\ntibble [1,011 × 7] (S3: tbl_df/tbl/data.frame)\n $ participantId : Factor w/ 1011 levels \"0\",\"1\",\"2\",\"3\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ householdSize : Factor w/ 3 levels \"1\",\"2\",\"3\": 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: Ord.factor w/ 4 levels \"Bachelors\"<\"Graduate\"<..: 3 3 3 3 1 3 3 1 1 1 ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n\n\n\n\n\n\nAdding a new column Age Group\n\n\nAdding Age-GroupViolin Plot\n\n\nFirst we can calculate the range using the quartile() function and then group them according and check their visualization after grouping them\n\n# Calculate the percentile values for age\nage_percentiles <- quantile(resident_new$age, probs = c(0.25, 0.5, 0.75, 1))\n\n# Display the percentile values\nprint(age_percentiles)\n\n 25%  50%  75% 100% \n  29   39   50   60 \n\n\nBased on the result, now will group them accordingly\n\n# Define the percentile ranges\nage_percentiles <- quantile(resident_new$age, probs = c(0, 0.25, 0.5, 0.75, 1))\n\n# Create age group labels based on the percentile ranges\nage_labels <- c(\"18-29 yrs\", \"30-39 yrs\", \"40-50 yrs\", \"51-60 yrs\")\n\n# Create age groups based on the percentile ranges\nresident_new$age_group <- cut(resident_new$age, breaks = age_percentiles, labels = age_labels, include.lowest = TRUE)\n\n\n# Display the updated table with age groups\nstr(resident_new)\n\ntibble [1,011 × 8] (S3: tbl_df/tbl/data.frame)\n $ participantId : Factor w/ 1011 levels \"0\",\"1\",\"2\",\"3\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ householdSize : Factor w/ 3 levels \"1\",\"2\",\"3\": 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: Ord.factor w/ 4 levels \"Bachelors\"<\"Graduate\"<..: 3 3 3 3 1 3 3 1 1 1 ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n $ age_group     : Factor w/ 4 levels \"18-29 yrs\",\"30-39 yrs\",..: 2 1 2 1 3 2 1 1 1 2 ...\n\n\n\n\n\n\n\n\nNotes\n\n\n\ncut() is used to create age groups based on the age column in the resident_new table. The breaks argument takes the percentile ranges obtained earlier, and the labels argument assigns labels to each group. The include.lowest = TRUE parameter ensures that the lowest age value is included in the first group.\n\n\n\n\n\n# Create a violin plot\nggplot(resident_new, aes(x = age_group, y = age)) +\n  geom_violin() +\n  xlab(\"Age Group\") +\n  ylab(\"Age\") +\n  ggtitle(\"Distribution of Age by Age Group\")\n\n\n\n\n\n\n\n\n\n1.2.2 Working with FinancialJournal dataset\nImport data from csv using readr::read_csv() and store it in variable financial.\nreadr is one of the tidyverse package.\n\nfinancial <- read_csv(\"data/FinancialJournal.csv\")\n\n\nDatatableStructureSummary StataticsSummary Table\n\n\nDisplaying the datatable using the DT package\n\nDT:: datatable(head(financial,100),options = list(pagelength=10,scrollX='400px'),class='cell-border stripe',filter='top')\n\n\n\n\n\n\n\n\nIt used to provide a compact and structured summary of the internal structure\n\nstr(financial)\n\nspc_tbl_ [1,513,636 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId: num [1:1513636] 0 0 0 1 1 1 2 2 2 3 ...\n $ timestamp    : POSIXct[1:1513636], format: \"2022-03-01\" \"2022-03-01\" ...\n $ category     : chr [1:1513636] \"Wage\" \"Shelter\" \"Education\" \"Wage\" ...\n $ amount       : num [1:1513636] 2473 -555 -38 2047 -555 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   timestamp = col_datetime(format = \"\"),\n  ..   category = col_character(),\n  ..   amount = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nThere are a total of 1,513,636 rows and 4 variables. The output reveals that variables participantId been read as numeric, continuous data types, and it should changed as nominal data instead because participantId serve as unique identifiers .\n\n\nIt provides a summary of the variables in the data frame, including their distribution, range, and missing values. This includes measures such as count, mean, standard deviation, minimum, maximum, and quartiles.\n\nHmisc::describe(financial)\n\nfinancial \n\n 4  Variables      1513636  Observations\n--------------------------------------------------------------------------------\nparticipantId \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 1513636        0     1011        1    480.9    341.2       43       86 \n     .25      .50      .75      .90      .95 \n     222      464      726      918      967 \n\nlowest :    0    1    2    3    4, highest: 1006 1007 1008 1009 1010\n--------------------------------------------------------------------------------\ntimestamp \n                  n             missing            distinct                Info \n            1513636                   0               87366                   1 \n               Mean                 Gmd                 .05                 .10 \n2022-08-26 05:00:48            10684501 2022-03-14 14:00:00 2022-03-31 07:20:00 \n                .25                 .50                 .75                 .90 \n2022-05-24 13:25:00 2022-08-25 15:00:00 2022-11-27 07:25:00 2023-01-22 10:20:00 \n                .95 \n2023-02-09 20:10:00 \n\nlowest : 2022-03-01 00:00:00 2022-03-01 04:50:00 2022-03-01 05:30:00 2022-03-01 05:40:00 2022-03-01 05:45:00\nhighest: 2023-02-28 23:35:00 2023-02-28 23:40:00 2023-02-28 23:45:00 2023-02-28 23:50:00 2023-02-28 23:55:00\n--------------------------------------------------------------------------------\ncategory \n       n  missing distinct \n 1513636        0        6 \n\nlowest : Education      Food           Recreation     RentAdjustment Shelter       \nhighest: Food           Recreation     RentAdjustment Shelter        Wage          \n                                                                      \nValue           Education           Food     Recreation RentAdjustment\nFrequency            3319         790051         296013            131\nProportion          0.002          0.522          0.196          0.000\n                                        \nValue             Shelter           Wage\nFrequency           11463         412659\nProportion          0.008          0.273\n--------------------------------------------------------------------------------\namount \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 1513636        0     6690    0.981    20.05    66.15  -21.050  -15.182 \n     .25      .50      .75      .90      .95 \n  -5.594   -4.000   21.598  107.467  159.561 \n\nlowest : -1562.726 -1556.356 -1499.254 -1475.672 -1458.686\nhighest:  4059.861  4069.449  4078.119  4085.387  4096.526\n--------------------------------------------------------------------------------\n\n\nFrom the output, there are zero missing values across all columns in financial\n\n\n\n\n\n\nNotes\n\n\n\nThe describe() function provides summary statistics for numerical variables by default. If we need to include categorical variables as well, it can set the fast = FALSE argument Hmisc::describe(resident_info, fast = FALSE)\nBy setting fast = FALSE, the describe() function will calculate summary statistics for both numerical and categorical variables in the resident_info data frame.\n\n\n\n\nCreating detailed summary table\n\ndf2 <- financial %>% \n  select(-starts_with('Q'), -starts_with('HQ')) %>%\n  mutate_if(is.integer, as.numeric) %>%\n  mutate_if(is.logical, as.numeric)\n\nflat_numeric1 <- df2 %>% select_if(is.numeric)\n\nprint(dfSummary(flat_numeric1, graph.magnif = 0.75), method = 'render')\n\n\n\nData Frame Summary\nflat_numeric1\nDimensions: 1513636 x 2\n  Duplicates: 1418986\n\n\n  \n    \n      No\n      Variable\n      Stats / Values\n      Freqs (% of Valid)\n      Graph\n      Valid\n      Missing\n    \n  \n  \n    \n      1\n      participantId\n[numeric]\n      Mean (sd) : 480.9 (295.9)min ≤ med ≤ max:0 ≤ 464 ≤ 1010IQR (CV) : 504 (0.6)\n      1011 distinct values\n      \n      1513636\n(100.0%)\n      0\n(0.0%)\n    \n    \n      2\n      amount\n[numeric]\n      Mean (sd) : 20 (111.8)min ≤ med ≤ max:-1562.7 ≤ -4 ≤ 4096.5IQR (CV) : 27.2 (5.6)\n      6690 distinct values\n      \n      1513636\n(100.0%)\n      0\n(0.0%)\n    \n  \n\nGenerated by summarytools 1.0.1 (R version 4.2.3)2023-05-13\n\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\nBased on the statistics from the summary table, below are some useful insights:\n\nParticipant ID: There are 1,011 unique participants in the financial data. The participant ID ranges from 0 to 1,010. .\nTimestamp: The financial data spans a time period from March 1, 2022, to February 28, 2023. The timestamp variable shows the date and time of each financial transaction. .\nCategory: There are six distinct categories in the financial data, including Education, Food, Recreation, RentAdjustment, Shelter, and Wage. The most frequent category is Food, accounting for approximately 52.2% of the transactions, followed by Recreation (19.6%) and Wage (27.3%).\nAmount: The amount variable represents the monetary value of each transaction. The mean amount is 20.05, indicating an average transaction value. The range of the amounts is from -1562.726 to 4096.526, with a wide distribution. The majority of the amounts fall within the range of -21.050 to 159.561.\n\n\n\n\nChanging Data Types:\n\nparticipantId is classified as <dbl>, numerical continuous data, instead of nominal. This is cast as <chr> class using as.factor()\ntimestamp has a big value contains date and time both, which is not required for our anaylsis. So i will change it into Year-month bascially extract that data only from timestamp and save it.\ncategory is classified as <chr  >but categorical data,which has 4 different category. It need to be changed using as.factor().\namount has decimal point upto 10. It will be rounded upto 2 for readability and easily computation.\n\n\n\nChanging data typeChecking the changes\n\n\n\nfinancial_new <- financial %>%\n  mutate(\n\n# Changing participantId to nominal\nparticipantId = as.factor(participantId),\n\n# Extracting Year-Month from timestamp\ntimestamp = format(as.Date(timestamp), \"%Y-%m\"),\n\n# Changing category to factor\ncategory = as.factor(category),\n\n# Rounding amount to 2 decimal places\namount = round(amount, 2)\n\n)\n\n\n\n\n# Check the data types of variables\nstr(financial_new)\n\ntibble [1,513,636 × 4] (S3: tbl_df/tbl/data.frame)\n $ participantId: Factor w/ 1011 levels \"0\",\"1\",\"2\",\"3\",..: 1 1 1 2 2 2 3 3 3 4 ...\n $ timestamp    : chr [1:1513636] \"2022-03\" \"2022-03\" \"2022-03\" \"2022-03\" ...\n $ category     : Factor w/ 6 levels \"Education\",\"Food\",..: 6 5 1 6 5 1 6 5 1 6 ...\n $ amount       : num [1:1513636] 2473 -555 -38 2047 -555 ...\n\n\n\n\n\n\nDivide Category into new columns and count Total Amount for each category\n\n\nCategory’sChecking the changes\n\n\n\nfinancial_new <- financial_new %>%\n  group_by(participantId, timestamp, category) %>%\n  summarise(total_amount = sum(amount), .groups = \"drop\") %>%\n  pivot_wider(names_from = category, values_from = total_amount)\n\nThe code chunk groups the data by participantId, timestamp, and category, calculates the sum of amount for each group, and then reshapes the data to have separate columns for each category, with the corresponding total_amount values. The resulting data frame is assigned to financial_new.The pivot_wider() function is used to reshape the data frame from a long format to a wide format. It takes the distinct category values as column names and populates the corresponding total_amount values for each participantId and timestamp combination.\n\n\n\nDT::datatable(financial_new, class= \"compact\", filter='top')\n\n\n\n\n\n\n\n\n\n\n\n\n1.2 Joining the Tables\nWe have 2 dataset resident_new with columns participantId, householdSize, haveKids, age, educationLevel,interestGroup, joviality, age_group and financial_new with columns `participantId, timestamp,Education ,Food, Recreation, Shelter, Wage, RentAdjustment.\n\nJoin TableCheck Table\n\n\n\nresident_financial <- left_join(resident_new, financial_new, by = \"participantId\")\n\nThe code chunk will create a new data frame resident_financial that combines the columns from both tables based on matching participantId values. The resulting data frame will include all the columns from both tables.\n\n\n\nDT::datatable(resident_financial, class= \"compact\", filter='top')"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html",
    "href": "Takehome Exercise/Takehome Ex 4/1.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "title: “Take-home Exercise 1”\nformat:\nhtml:\ncode-fold: true\ncode-summary: “code block”"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#installing-r-packages",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#installing-r-packages",
    "title": "ISSS608-VAA",
    "section": "1.1: Installing R packages",
    "text": "1.1: Installing R packages\npacman::p_load() function from the pacman package is used in the following code chunk to install and call the libraries of multiple R packages:\n\n#| code-fold: false\n\n#| warning: false\n\npacman::p_load(tidyverse, ggstatsplot, ggridges, plotly, patchwork, scales,\n\nggiraph, gganimate, gifski, ggpubr, ggdist, qqplotr, gt,\n\nHmisc, vcd, knitr, kableExtra, DT, rstatix,\n\nurbnthemes)\n\nInstalling package into 'C:/Users/ABHISHEK/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n\n\nWarning: package 'urbnthemes' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\nWarning: 'BiocManager' not available.  Could not check Bioconductor.\n\nPlease use `install.packages('BiocManager')` and then retry.\n\n\nWarning in p_install(package, character.only = TRUE, ...):\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'urbnthemes'\n\n\nWarning in pacman::p_load(tidyverse, ggstatsplot, ggridges, plotly, patchwork, : Failed to install/load:\nurbnthemes"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#data-sets",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#data-sets",
    "title": "ISSS608-VAA",
    "section": "1.2: Data Sets",
    "text": "1.2: Data Sets\nTwo datasets are provided for the task: Participants.csv and FinancialJournal.csv .\nThese are uploaded as * demo_data * and * financial_data * respectively."
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#summary-statistics-of-demo_data",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#summary-statistics-of-demo_data",
    "title": "ISSS608-VAA",
    "section": "1.2.1: Summary Statistics of demo_data",
    "text": "1.2.1: Summary Statistics of demo_data\n\n#| message: false\n\ndemo_data <- read_csv(\"data/Participants.csv\")\n\nRows: 1011 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): educationLevel, interestGroup\ndbl (4): participantId, householdSize, age, joviality\nlgl (1): haveKids\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nFirst 10 RowsDataset StructureSummary Statistics\n\n\n\nDisplaying first 10 rows using head(): *\n\n\n#| code-fold: false\n\nhead(demo_data,10) %>%\n\nkbl() %>%\n\nkable_material()\n\n\n\n \n  \n    participantId \n    householdSize \n    haveKids \n    age \n    educationLevel \n    interestGroup \n    joviality \n  \n \n\n  \n    0 \n    3 \n    TRUE \n    36 \n    HighSchoolOrCollege \n    H \n    0.0016267 \n  \n  \n    1 \n    3 \n    TRUE \n    25 \n    HighSchoolOrCollege \n    B \n    0.3280865 \n  \n  \n    2 \n    3 \n    TRUE \n    35 \n    HighSchoolOrCollege \n    A \n    0.3934696 \n  \n  \n    3 \n    3 \n    TRUE \n    21 \n    HighSchoolOrCollege \n    I \n    0.1380634 \n  \n  \n    4 \n    3 \n    TRUE \n    43 \n    Bachelors \n    H \n    0.8573967 \n  \n  \n    5 \n    3 \n    TRUE \n    32 \n    HighSchoolOrCollege \n    D \n    0.7729578 \n  \n  \n    6 \n    3 \n    TRUE \n    26 \n    HighSchoolOrCollege \n    I \n    0.8339807 \n  \n  \n    7 \n    3 \n    TRUE \n    27 \n    Bachelors \n    A \n    0.9581894 \n  \n  \n    8 \n    3 \n    TRUE \n    20 \n    Bachelors \n    G \n    0.6975548 \n  \n  \n    9 \n    3 \n    TRUE \n    35 \n    Bachelors \n    D \n    0.4671314 \n  \n\n\n\n\n\n\n\n\nChecking the structure of demo_data using str(): *\n\n\n#| code-fold: false\n\nstr(demo_data)\n\nspc_tbl_ [1,011 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId : num [1:1011] 0 1 2 3 4 5 6 7 8 9 ...\n $ householdSize : num [1:1011] 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: chr [1:1011] \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   householdSize = col_double(),\n  ..   haveKids = col_logical(),\n  ..   age = col_double(),\n  ..   educationLevel = col_character(),\n  ..   interestGroup = col_character(),\n  ..   joviality = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nThere are a total of 1011 rows and 7 variables. The output reveals that variables * participantId * and * householdSize * have been read as numeric, continuous data types, but should be analysed as nominal data instead.\n\n\n\nInspecting summary statistics of the dataset using describe() from Hmisc pacakage: *\n\n\n#| code-fold: false\n\nHmisc::describe(demo_data)\n\ndemo_data \n\n 7  Variables      1011  Observations\n--------------------------------------------------------------------------------\nparticipantId \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n    1011        0     1011        1      505    337.3     50.5    101.0 \n     .25      .50      .75      .90      .95 \n   252.5    505.0    757.5    909.0    959.5 \n\nlowest :    0    1    2    3    4, highest: 1006 1007 1008 1009 1010\n--------------------------------------------------------------------------------\nhouseholdSize \n       n  missing distinct     Info     Mean      Gmd \n    1011        0        3    0.886    1.964   0.8635 \n                            \nValue          1     2     3\nFrequency    337   373   301\nProportion 0.333 0.369 0.298\n--------------------------------------------------------------------------------\nhaveKids \n       n  missing distinct \n    1011        0        2 \n                      \nValue      FALSE  TRUE\nFrequency    710   301\nProportion 0.702 0.298\n--------------------------------------------------------------------------------\nage \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n    1011        0       43    0.999    39.07     14.3       20       22 \n     .25      .50      .75      .90      .95 \n      29       39       50       56       58 \n\nlowest : 18 19 20 21 22, highest: 56 57 58 59 60\n--------------------------------------------------------------------------------\neducationLevel \n       n  missing distinct \n    1011        0        4 \n                                                                      \nValue                Bachelors            Graduate HighSchoolOrCollege\nFrequency                  232                 170                 525\nProportion               0.229               0.168               0.519\n                              \nValue                      Low\nFrequency                   84\nProportion               0.083\n--------------------------------------------------------------------------------\ninterestGroup \n       n  missing distinct \n    1011        0       10 \n\nlowest : A B C D E, highest: F G H I J\n                                                                      \nValue          A     B     C     D     E     F     G     H     I     J\nFrequency    102    91   102    96    83   106   108   111    96   116\nProportion 0.101 0.090 0.101 0.095 0.082 0.105 0.107 0.110 0.095 0.115\n--------------------------------------------------------------------------------\njoviality \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n    1011        0     1011        1   0.4938   0.3364  0.05642  0.10871 \n     .25      .50      .75      .90      .95 \n 0.24007  0.47754  0.74682  0.90645  0.96024 \n\nlowest : 0.000204000 0.000265000 0.000985000 0.001365799 0.001626703\nhighest: 0.992601749 0.997604884 0.997670843 0.998644049 0.999233967\n--------------------------------------------------------------------------------\n\n\nFrom the output, there are zero missing values across all columns in * demo_data *.\n\n\n\n\n\nInitial Insights from Summary Statistics *\n\nThere seems to be a fairly even distribution of participants across * joviality , householdSize , age * and * interestGroup *. There are more participants who do not have children, and approximately half of them have attained the highest education at high school or college level. The distributions and correlations of these variables will be investigated further in subsequent sections, after appropriate data wrangling techniques have been applied.\n\n\nChanging Data Types *:\n\nparticipantId * is classified as <dbl  >, numerical continuous data, instead of nominal. This is cast as <chr  > class using as.character()\n\n\neducationLevel * is classified as <chr  > categorical data, and consists of four levels, with inherent hierarchy. This variable is cast as factor type on an ordinal scale using the ordered() function\n\n\nhouseholdSize * and * interestGroup * are classified as <dbl  > and <chr  > respectively, but are categorical in nature with different levels. These variables are cast as factors using as.factor()\n\n\n\ndemo_data_new <- demo_data %>%\n\n# Changing participantId to character\n\nmutate(participantId = as.character(demo_data$participantId),\n\n# Updating educationLevel with ordinal scale\n\neducationLevel = ordered(demo_data$educationLevel, levels = c(\"Graduate\", \"Bachelors\", \"HighSchoolOrCollege\", \"Low\")),\n\n# Casting householdSize and interestGroup as factors\n\nhouseholdSize = as.factor(demo_data$householdSize),\n\ninterestGroup = as.factor(demo_data$interestGroup)\n\n)\n\n\ndemo_data_new: *\n\n\nhead(demo_data_new, 10) %>%\n\nkbl() %>%\n\nkable_styling(full_width = F, bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n \n  \n    participantId \n    householdSize \n    haveKids \n    age \n    educationLevel \n    interestGroup \n    joviality \n  \n \n\n  \n    0 \n    3 \n    TRUE \n    36 \n    HighSchoolOrCollege \n    H \n    0.0016267 \n  \n  \n    1 \n    3 \n    TRUE \n    25 \n    HighSchoolOrCollege \n    B \n    0.3280865 \n  \n  \n    2 \n    3 \n    TRUE \n    35 \n    HighSchoolOrCollege \n    A \n    0.3934696 \n  \n  \n    3 \n    3 \n    TRUE \n    21 \n    HighSchoolOrCollege \n    I \n    0.1380634 \n  \n  \n    4 \n    3 \n    TRUE \n    43 \n    Bachelors \n    H \n    0.8573967 \n  \n  \n    5 \n    3 \n    TRUE \n    32 \n    HighSchoolOrCollege \n    D \n    0.7729578 \n  \n  \n    6 \n    3 \n    TRUE \n    26 \n    HighSchoolOrCollege \n    I \n    0.8339807 \n  \n  \n    7 \n    3 \n    TRUE \n    27 \n    Bachelors \n    A \n    0.9581894 \n  \n  \n    8 \n    3 \n    TRUE \n    20 \n    Bachelors \n    G \n    0.6975548 \n  \n  \n    9 \n    3 \n    TRUE \n    35 \n    Bachelors \n    D \n    0.4671314"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#summary-statistics-of-financial_data",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#summary-statistics-of-financial_data",
    "title": "ISSS608-VAA",
    "section": "1.2.2: Summary Statistics of financial_data",
    "text": "1.2.2: Summary Statistics of financial_data\n\n#| message: false\n\nfinancial_data <- read_csv(\"data/FinancialJournal.csv\")\n\nRows: 1513636 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): category\ndbl  (2): participantId, amount\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nAt a GlimpseSummary Statistics\n\n\n\n#| code-fold: false\n\nglimpse(financial_data)\n\nRows: 1,513,636\nColumns: 4\n$ participantId <dbl> 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,…\n$ timestamp     <dttm> 2022-03-01, 2022-03-01, 2022-03-01, 2022-03-01, 2022-03…\n$ category      <chr> \"Wage\", \"Shelter\", \"Education\", \"Wage\", \"Shelter\", \"Educ…\n$ amount        <dbl> 2472.50756, -554.98862, -38.00538, 2046.56221, -554.9886…\n\n\nThe dataset captures specific financial transactions by participants, with a single transaction recorded in each row. Participants may have multiple transactions over time.\n\n\n\n#| code-fold: false\n\nHmisc::describe(financial_data)\n\nfinancial_data \n\n 4  Variables      1513636  Observations\n--------------------------------------------------------------------------------\nparticipantId \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 1513636        0     1011        1    480.9    341.2       43       86 \n     .25      .50      .75      .90      .95 \n     222      464      726      918      967 \n\nlowest :    0    1    2    3    4, highest: 1006 1007 1008 1009 1010\n--------------------------------------------------------------------------------\ntimestamp \n                  n             missing            distinct                Info \n            1513636                   0               87366                   1 \n               Mean                 Gmd                 .05                 .10 \n2022-08-26 05:00:48            10684501 2022-03-14 14:00:00 2022-03-31 07:20:00 \n                .25                 .50                 .75                 .90 \n2022-05-24 13:25:00 2022-08-25 15:00:00 2022-11-27 07:25:00 2023-01-22 10:20:00 \n                .95 \n2023-02-09 20:10:00 \n\nlowest : 2022-03-01 00:00:00 2022-03-01 04:50:00 2022-03-01 05:30:00 2022-03-01 05:40:00 2022-03-01 05:45:00\nhighest: 2023-02-28 23:35:00 2023-02-28 23:40:00 2023-02-28 23:45:00 2023-02-28 23:50:00 2023-02-28 23:55:00\n--------------------------------------------------------------------------------\ncategory \n       n  missing distinct \n 1513636        0        6 \n\nlowest : Education      Food           Recreation     RentAdjustment Shelter       \nhighest: Food           Recreation     RentAdjustment Shelter        Wage          \n                                                                      \nValue           Education           Food     Recreation RentAdjustment\nFrequency            3319         790051         296013            131\nProportion          0.002          0.522          0.196          0.000\n                                        \nValue             Shelter           Wage\nFrequency           11463         412659\nProportion          0.008          0.273\n--------------------------------------------------------------------------------\namount \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 1513636        0     6690    0.981    20.05    66.15  -21.050  -15.182 \n     .25      .50      .75      .90      .95 \n  -5.594   -4.000   21.598  107.467  159.561 \n\nlowest : -1562.726 -1556.356 -1499.254 -1475.672 -1458.686\nhighest:  4059.861  4069.449  4078.119  4085.387  4096.526\n--------------------------------------------------------------------------------\n\n\nFrom the output, there are zero missing values across all columns in * financial_data *. Summary statistics revealed that a total of 1,513,636 financial transactions were captured over a year from March 2022 to February 2023.\n\n\n\n\n\nInitial Insights from Summary Statistics *\n\nThere seems to be a skewed distribution of transactions, with a higher proportion (0.522) falling under * category: Food * followed by * category: Wage. * Transaction * amount * has a wide range due to negative and positive values, and a skewed distribution due to large difference between 95th percentile value (159.561) and highest value (4096.526). The distributions and correlations of these variables will be investigated further in subsequent sections, after appropriate data wrangling and transformation techniques have been applied.\n\n\nData Quality Issues *:\n\nparticipantId * is classified as <dbl  >, numerical continuous data, instead of nominal. This is cast as <chr  > class using as.character()\n\n\ncategory * is classified as <chr  >, but is categorical in nature with six different levels. These is cast as factor type using as.factor()\n\n\ntimestamp * contains both Date and Time, which is not suitable for analysis. Year-Month is extracted and saved into a separate variable, * transDate *.\n\n\namount * is reflected as a numeric value with 3 decimal places. This is rounded to 2 d.p. to reflect standard currency structure while maintaing accuracy.\n\n\n\nfinancial_data_new <- financial_data %>%\n\n# Changing participantId to character\n\nmutate(participantID = as.character(financial_data$participantId),\n\n# Casting category as factor\n\ncategory = as.factor(financial_data$category),\n\n# Extracting Year-Month from timestamp\n\ntransDate = as.character(format(as.Date(financial_data  $timestamp), \"%Y-%m\")),\n\n# Rounding amount to 2 decimal places\n\namount = round(amount, digits = 2)\n\n) %>%\n\n# remove timestamp column\n\nselect(-timestamp) %>%\n\n# Sort by Participant ID\n\narrange(participantId)\n\n\nfinancial_data_new: *\n\n\nhead(financial_data_new, 10) %>%\n\nkbl() %>%\n\nkable_styling(full_width = F, bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n \n  \n    participantId \n    category \n    amount \n    participantID \n    transDate \n  \n \n\n  \n    0 \n    Wage \n    2472.51 \n    0 \n    2022-03 \n  \n  \n    0 \n    Shelter \n    -554.99 \n    0 \n    2022-03 \n  \n  \n    0 \n    Education \n    -38.01 \n    0 \n    2022-03 \n  \n  \n    0 \n    Shelter \n    -554.99 \n    0 \n    2022-03 \n  \n  \n    0 \n    Education \n    -38.01 \n    0 \n    2022-03 \n  \n  \n    0 \n    Wage \n    4.28 \n    0 \n    2022-03 \n  \n  \n    0 \n    Food \n    -4.17 \n    0 \n    2022-03 \n  \n  \n    0 \n    Wage \n    385.58 \n    0 \n    2022-03 \n  \n  \n    0 \n    Food \n    -4.17 \n    0 \n    2022-03 \n  \n  \n    0 \n    Wage \n    21.42 \n    0 \n    2022-03"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#banding-of-age-into-age-groups",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#banding-of-age-into-age-groups",
    "title": "ISSS608-VAA",
    "section": "2.1: Banding of Age into Age Groups",
    "text": "2.1: Banding of Age into Age Groups\nThe range of participants’ ages is rather wide, spanning from 18-60 years old:\n\noptions(width = 100)\n\ndescribe(demo_data_new$age)\n\ndemo_data_new$age \n       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 \n    1011        0       43    0.999    39.07     14.3       20       22       29       39       50 \n     .90      .95 \n      56       58 \n\nlowest : 18 19 20 21 22, highest: 56 57 58 59 60\n\n\n\nThese may be grouped together by percentile, and analysed as age groups instead to give a better overview of different demographics. Each band is approximately grouped into 10-year age ranges:\n\n\n25th Percentile: 18-29yo *\n\n\n25-50th Percentile: 30-39yo *\n\n\n50-75th Percentile: 40-50yo *\n\n\n75th Percentile: 51-60yo *\n\n\n\n\n#  | fig-width: 8\n\n  # Grouping Age into Age Groups\n\ndemo_data_new  $ageGroup<- as.factor(cut(demo_data_new  $age,\n\nbreaks = c(0,29,39,50,60),\n\nlabels = c(\"18-29\", \"30-39\", \"40-50\", \"51-60\")))\n\n  # Setting default theme for all plots\n\n\n\n  # Barchart of ageGroup\n\nggplot(demo_data_new, aes(x = ageGroup)) +\n\ngeom_bar() +\n\nlabs(title = \"Participants are evenly distributed across Age Groups\",\n\nx = NULL,\n\ny = NULL) +\n\ngeom_text(stat = \"count\",\n\naes(label = after_stat(count)),\n\nvjust = -1) +\n\ntheme(text = element_text(size = 12),\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#computing-new-variables-based-on-financial-transactions",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#computing-new-variables-based-on-financial-transactions",
    "title": "ISSS608-VAA",
    "section": "2.2: Computing New Variables based on financial transactions",
    "text": "2.2: Computing New Variables based on financial transactions\n\nfinancial_data_new * lists out individual transactions by participant, and records both cash inflows and outflows. A boxplot is used to visualise the range of values by category:\n\n\n# | fig-width: 8\n\nggplot(financial_data_new, aes(x = amount,\n\ny = category)) +\n\nstat_boxplot(geom = \"errorbar\", width = 0.2) +\n\ngeom_boxplot() +\n\nlabs(title = \"Transaction Amount Range by Category\",\n\nx = NULL,\n\ny = NULL) +\n\ngeom_vline(aes(xintercept = 0),\n\ncolour=\"#f53b5d\", linewidth = 0.5, linetype = \"dashed\") +\n\ntheme(axis.ticks.y = element_blank(),\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\nInsights from Boxplot *\nTransactions are either outflows (-ve value) or inflows (+ve value)\n\nWage , Shelter * and * RentAdjustment * have a larger range of values compared to Recreation, Food and Education\n\n\nWage * seems to be made up of ‘clusters’ of points, with a gap in between higher wage groups and lower wage groups\n\n\n\nNew aggregate variables are computed based on this for further analysis:\n\n\nnumTrans *: Total Number of transactions per participant\n\n\nnetAmount *: Net Total amount ( $) of transactions per participant = (Inflow - Outflow)\n\n\nexpenseRatio *: % of inflow that is spent (outflow) per participant\n\n\nout_pctEdu, out_pctFood, out_pctRec, out_pctShelter *: % contribution to cash outflow by category\n\n\nin_pctWage, in_pctRentAdj *: % contribution to cash inflow by category\n\n\n\n# Create new dataframe with transformed variables\nfinancial_agg <- financial_data_new %>%\n                  group_by(participantId) %>% \n                  summarise(numTrans = n(), #< Count number of rows per participantId\n                            netAmount = sum(amount), #< Sum net total amount per participantId\n                            annualWage = sum(amount[category == \"Wage\"]), #< Sum total income per participantId\n                            \n                            totInflow = sum(amount[category == \"Wage\"]) + \n                                        sum(amount[category == \"RentAdjustment\"]), #< Compute inflow value\n                            totOutflow = sum(abs(amount[category == \"Education\"])) + \n                                         sum(abs(amount[category == \"Food\"])) +\n                                         sum(abs(amount[category == \"Recreation\"])) +\n                                         sum(abs(amount[category== \"Shelter\"])), #< Compute outflow value\n                            expenseRatio = round((totOutflow/totInflow), 2), #< Compute outflow/inflow ratio\n                        #< % of each category contribution to inflow\n                            in_pctWage = round((sum(amount[category == \"Wage\"])/totInflow), 2), \n                            in_pctRentAdj = round((sum(amount[category == \"RentAdjustment\"])/totInflow), 2),\n                        #< % of each category contribution to outflow    \n                            out_pctEdu = round((sum(abs(amount[category == \"Education\"]))/totOutflow), 2), \n                            out_pctFood = round((sum(abs(amount[category == \"Food\"]))/totOutflow), 2),\n                            out_pctRec = round((sum(abs(amount[category == \"Recreation\"]))/totOutflow), 2),\n                            out_pctShelter = round((sum(abs(amount[category == \"Shelter\"]))/totOutflow), 2) \n                            ) %>%\n                  replace(is.na(.),0) %>%\n                  ungroup()\n\n\nfinancial_agg: *\n\n\nhead(financial_agg, 10) %>%\n\nkbl() %>%\n\nkable_styling(full_width = F, bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n \n  \n    participantId \n    numTrans \n    netAmount \n    annualWage \n    totInflow \n    totOutflow \n    expenseRatio \n    in_pctWage \n    in_pctRentAdj \n    out_pctEdu \n    out_pctFood \n    out_pctRec \n    out_pctShelter \n  \n \n\n  \n    0 \n    1617 \n    94582.68 \n    109816.59 \n    109816.59 \n    15233.91 \n    0.14 \n    1.00 \n    0.00 \n    0.03 \n    0.21 \n    0.29 \n    0.47 \n  \n  \n    1 \n    1560 \n    78860.22 \n    96374.57 \n    96374.57 \n    17514.35 \n    0.18 \n    1.00 \n    0.00 \n    0.03 \n    0.18 \n    0.38 \n    0.41 \n  \n  \n    2 \n    1543 \n    70068.50 \n    85108.65 \n    85108.65 \n    15040.15 \n    0.18 \n    1.00 \n    0.00 \n    0.01 \n    0.23 \n    0.28 \n    0.48 \n  \n  \n    3 \n    1644 \n    66460.86 \n    82269.18 \n    82269.18 \n    15808.32 \n    0.19 \n    1.00 \n    0.00 \n    0.03 \n    0.21 \n    0.30 \n    0.46 \n  \n  \n    4 \n    1730 \n    82711.54 \n    106056.88 \n    110866.16 \n    28154.62 \n    0.25 \n    0.96 \n    0.04 \n    0.01 \n    0.12 \n    0.22 \n    0.65 \n  \n  \n    5 \n    1426 \n    5958.28 \n    23208.92 \n    23208.92 \n    17250.64 \n    0.74 \n    1.00 \n    0.00 \n    0.01 \n    0.24 \n    0.30 \n    0.45 \n  \n  \n    6 \n    1606 \n    4296.42 \n    23407.25 \n    23407.25 \n    19110.83 \n    0.82 \n    1.00 \n    0.00 \n    0.01 \n    0.20 \n    0.40 \n    0.40 \n  \n  \n    7 \n    2235 \n    47704.46 \n    72877.03 \n    72877.03 \n    25172.57 \n    0.35 \n    1.00 \n    0.00 \n    0.01 \n    0.24 \n    0.23 \n    0.52 \n  \n  \n    8 \n    2197 \n    17774.97 \n    44544.72 \n    44544.72 \n    26769.75 \n    0.60 \n    1.00 \n    0.00 \n    0.01 \n    0.22 \n    0.20 \n    0.57 \n  \n  \n    9 \n    1639 \n    136200.02 \n    152575.41 \n    152575.41 \n    16375.39 \n    0.11 \n    1.00 \n    0.00 \n    0.07 \n    0.21 \n    0.28 \n    0.44"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#banding-of-participants-by-wage",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#banding-of-participants-by-wage",
    "title": "ISSS608-VAA",
    "section": "2.3: Banding of participants by Wage",
    "text": "2.3: Banding of participants by Wage\nFrom the boxplot diagram in section 2.2, there is a large variation in wage range, and a segregation between lower and higher wage bands.\n\ndescribe(financial_agg$annualWage)\n\nfinancial_agg$annualWage \n       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 \n    1011        0     1011        1    45102    31841     2482     2704    28096    40995    57654 \n     .90      .95 \n   79184   101220 \n\nlowest :   2098.36   2209.24   2235.99   2241.90   2252.72\nhighest: 174221.60 176406.39 179331.79 211439.15 211734.65\n\n\n\nBased on the Mean and distribution of values across percentiles as shown above, participants are banded according to annual wage:\n\n\nBottom 10th Percentile: low *\n\n\n11-50th Percentile: mid-low *\n\n\n50-90th Percentile: mid-high *\n\n\nTop 10th Percentile: high *\n\n\n\n\n  # Grouping Annual wage into income Groups\n\nfinancial_agg  $incomeGroup <- as.factor(cut(financial_agg  $annualWage,\n\nbreaks = c(0,2704,40995,79184,Inf),\n\nlabels = c(\"low\", \"mid-low\", \"mid-high\", \"high\")))\n\n  # Barchart of incomeGroup\n\nggplot(financial_agg, aes(x = incomeGroup)) +\n\ngeom_bar() +\n\nlabs(title = \"Higher concentration of Participants in Middle Income Groups\",\n\nx = NULL,\n\ny = NULL) +\n\ngeom_text(stat = \"count\",\n\naes(label = after_stat(count)),\n\nvjust = -1) +\n\ntheme(text = element_text(size = 12),\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#home-ownership",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#home-ownership",
    "title": "ISSS608-VAA",
    "section": "2.4: Home Ownership",
    "text": "2.4: Home Ownership\nTo derive home ownership from financial transactions, we filter out participants with transactions in the ‘RentAdjustment’ category. This is based on the assumption that ‘RentAdjustment’ is additional rental income for the participant, who is the home owner. A new boolean variable, * homeOwner *, is created to reflect this.\n\n  # Create new column homeOwner with boolean values, true if participant gets income from rent adjustment\n\nfinancial_agg <- financial_agg %>%\n\nmutate(homeOwner = if_else(in_pctRentAdj> 0, TRUE, FALSE))\n\n  # Barchart of homeOwner\n\nggplot(financial_agg, aes(x = homeOwner)) +\n\ngeom_bar() +\n\nlabs(title = \"The City has a very small proportion of Home Owners\",\n\nx = \"Home Owner?\",\n\ny = NULL) +\n\ngeom_text(stat = \"count\",\n\naes(label = after_stat(count)),\n\nvjust = -1) +\n\ntheme(text = element_text(size = 12),\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#computing-annual-income-per-capita",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#computing-annual-income-per-capita",
    "title": "ISSS608-VAA",
    "section": "2.5: Computing Annual Income per Capita",
    "text": "2.5: Computing Annual Income per Capita\nThe dataframes are first combined into * df_combined *:\n\ndf_combined   <- cbind(demo_data_new, financial_agg) %>%\n\nselect(unique(colnames(.)))\n\nDT::datatable(df_combined  [c(\"participantId\", \"ageGroup\", \"incomeGroup\", \"householdSize\", \"educationLevel\", \"haveKids\", \"interestGroup\", \"joviality\", \"numTrans\", \"expenseRatio\", \"out_pctEdu\", \"out_pctFood\", \"out_pctRec\", \"out_pctShelter\")  ],\n\nclass =\"compact\")\n\n\n\n\n\n\nThe formula used to determine Income per Capita for this study is as follows:\n$ $Income per Capita = frac{Total Annual Wage}{Household Size} $ $\n\n#| fig-width: 8\n#| fig-height: 5\n#| warning: false\n\n# Compute income per capita and save as new variable\ndf_combined <- df_combined %>%\n              mutate(incomePerCapita = round((annualWage/as.integer(householdSize)), 0))\n\n# Calculate min, max, 95th percentile and median values for annotations\nmin_incomePC <- round(min(df_combined$incomePerCapita),0)\nmax_incomePC <- round(max(df_combined$incomePerCapita),0)\nq_incomePC <- round(quantile(df_combined$incomePerCapita, probs = .95),0)\nmedian_incomePC <- round(median(df_combined$incomePerCapita),0)\n\n# Histogram of income per capita\nh <- ggplot(df_combined, aes(x = incomePerCapita)) +\n      geom_histogram(bins = 15,\n                    color = \"#F8F3E6\") +\n      scale_x_continuous(breaks = scales::pretty_breaks(n = 10),\n                        limits = c(500,140000),\n                        labels = label_dollar()) +\n      geom_vline(aes(xintercept = median_incomePC),\n                    colour=\"grey40\", linewidth = 0.8, linetype = \"dashed\") +\n      annotate(geom = \"text\", x = 50000, y = 250,\n              label = paste0(\"Median Income per Capita: $\", median_incomePC)) +\n      labs(x = NULL, y = NULL) +\n      theme_minimal() +\n      theme(axis.text.y = element_blank(),\n           panel.grid.major = element_blank(),\n           plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n#Boxplot of Income per capita\nbox <- ggplot(df_combined, aes(y = incomePerCapita)) + \n          geom_boxplot(outlier.colour=\"salmon\", outlier.shape=16,\n                        outlier.size=1, notch=FALSE) + \n          coord_flip() + \n          annotate(geom = \"text\", x = 0.38, y = min_incomePC,\n                  label = paste0(\"$\", min_incomePC),\n                  color = \"grey30\") + \n          annotate(geom = \"text\", x = 0.38, y = q_incomePC,\n                  label = paste0(\"$\", q_incomePC),\n                  color = \"grey30\") +\n          annotate(geom = \"text\", x = 0.38, y = max_incomePC,\n                  label = paste0(\"$\", max_incomePC),\n                  color = \"salmon\") + \n          labs(title = \"Right-skewed distribution of Income per Capita\",\n               y = \"\", x = \"\") + \n          scale_y_continuous(limits = c(500,140000), \n                             labels = label_dollar()) +\n          stat_boxplot(geom=\"errorbar\", width=0.5) + \n          theme_minimal() +\n          theme(axis.text = element_blank(), \n                axis.ticks = element_blank(),\n                panel.grid.major = element_blank(),\n                plot.background =\n                  element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\nhbox <- (box / h) + \n        plot_layout(heights = c(0.8, 4))\n\nhbox\n\nWarning: Removed 2 rows containing missing values (`geom_bar()`).\n\n\n\n\n\n\ndescribe(df_combined  $incomePerCapita)\n\ndf_combined$incomePerCapita \n       n  missing distinct     Info     Mean      Gmd      .05      .10      .25      .50      .75 \n    1011        0      987        1    27241    21160    923.5   1321.0  14741.0  23559.0  34914.0 \n     .90      .95 \n 53265.0  64212.0 \n\nlowest :    745    747    752    756    763, highest: 119282 122003 122060 124221 130647"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#joviality",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#joviality",
    "title": "ISSS608-VAA",
    "section": "3.1: * Joviality *",
    "text": "3.1: * Joviality *\nEach participant has a * joviality * score on a scale of 0 to 1. For the purpose of this study, we assume that the closer the score is to 1 (maximum), the more jovial the participant was recorded at the start of the survey. Joviality will thus be analysed across different demographic and financial variables, to find significant patterns and trends.\n\n3.1.1: Distribution\nThe distribution of joviality scores is first visualised to determine the variation of values across the sample population:\n\n#  | warning: false\n\n#  | fig-width: 8\n\n#mean_jov   <- mean(df_combined  $joviality)\n\n#std_jov   <-\n\nggplot(df_combined, aes(x = joviality)) +\n\ngeom_histogram(bins = 15,\n\ncolor = \"#F8F3E6\") +\n\n#stat_function(fun = dnorm, args = list(mean = mean_jov, sd = std_jov), col=\"#93c7c2\", size = .7)+\n\nscale_x_continuous(breaks = scales::pretty_breaks(n = 10),\n\nlimits = c(0,1)) +\n\ngeom_vline(aes(xintercept = mean(joviality)),\n\ncolour=\"#f53b5d\", linewidth = 0.8, linetype = \"dashed\") +\n\ngeom_vline(aes(xintercept = median(joviality)),\n\ncolour=\"grey40\", linewidth = 0.8, linetype = \"dashed\") +\n\nlabs(x = \"Joviality Score\",\n\ny = NULL) +\n\ntheme(axis.ticks.y = element_blank(),\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\nWarning: Removed 2 rows containing missing values (`geom_bar()`).\n\n\n\n\n\nThe mean < span > joviality score is close to the median < span >, suggesting that joviality resembles a normal distribution.\n\n\n3.1.2: * Are there differences in Joviality Scores Across Income and Age Groups? *\nWe seek to find out if specific groups within the population have reported lower or higher joviality scores, and if this difference between factor levels in the sample is significant enough to represent the overall city population.\nA normality assumption test is first conducted across factor levels for joviality score across income and age groups. At a confidence level of 95%, we test the following hypothesis:\n$ $H_0: Joviality is normally distributed across groups $ $\n$ $H_1: Joviality is not normally distributed across groups $ $\n\nIncome Groups *\n\n\nDisributionNormality TestANOVA\n\n\n\n#  | fig-width: 8\n\nggplot(df_combined, aes(x = joviality, fill = incomeGroup)) +\n\ngeom_density(alpha = 0.4) +\n\nlabs(title = \"Distribution of Joviality Score Across Income Groups\") +\n\nannotate(geom = \"text\", x = 0.2, y = 2.4,\n\nlabel = \"High income groups recorded lower joviality\") +\n\nannotate(geom = \"text\", x = 0.8, y = 2.05,\n\nlabel = \"Low income groups recorded higher joviality\") +\n\ntheme(axis.text.y = element_blank(),\n\naxis.title.y = element_blank(),\n\npanel.grid.major = element_blank(),\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\n\n\n#  | fig-width: 8\n\n#  | fig-height: 5\n\nggplot(df_combined,\n\nmapping = aes(sample = joviality,\n\nfill = incomeGroup))+\n\nstat_qq_band(alpha=0.15) +\n\nstat_qq_line(alpha=0.15) +\n\nstat_qq_point(size=0.5) +\n\nfacet_wrap(  ~ incomeGroup, nrow = 1) +\n\nlabs(title = \"Deviation from normality across Income Groups\",\n\nsubtitle = \"Q-Q plots visually indicate that the data is not normally distributed\",\n\nx = \"\", y = \"\") +\n\ntheme_bw() +\n\ntheme(legend.position = \"none\",\n\naxis.text.y = element_blank(),\n\naxis.text.x = element_blank(),\n\naxis.ticks.y = element_blank(),\n\naxis.ticks.x = element_blank(),\n\npanel.grid.minor = element_blank(),\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\ndf_combined %>%\n\ngroup_by(incomeGroup) %>%\n\nshapiro_test(joviality) %>%\n\nungroup() %>%\n\nkbl() %>%\n\nkable_styling(full_width = F, bootstrap_options = \"responsive\")\n\n\n\n \n  \n    incomeGroup \n    variable \n    statistic \n    p \n  \n \n\n  \n    low \n    joviality \n    0.9179184 \n    9.10e-06 \n  \n  \n    mid-low \n    joviality \n    0.9467014 \n    0.00e+00 \n  \n  \n    mid-high \n    joviality \n    0.9534245 \n    0.00e+00 \n  \n  \n    high \n    joviality \n    0.9249118 \n    2.37e-05 \n  \n\n\n\n\n\nSince the p-value across each income group is < significance level 0.05, we reject the null hypothesis, concluding that * joviality does not follow a normal distribution across income groups *. To test if there is a significant difference between groups, a non-parametric test will be used in subsequent analysis, with median value as measure of central tendency.\n\n\nA non-parametric Kruskal-Wallis one-way ANOVA test is conducted to determine if there is a significant difference in joviality score between income groups. At a significance level of 0.05, we test the following hypothesis:\n$ $H_0: There is no difference in mu between income groups $ $\n$ $H_0: There is a difference in mu between two or more income groups $ $\nThe p-value is < significance level of 0.05, so we can reject the null hypothesis and conclude that median joviality differs among income groups. In fact, there is a large difference in mean joviality between low income and high income groups, * with participants in low income groups having greater joviality (median = 0.75) than higher income groups (median = 0.23). *\n\n\n\n\nAge Groups *\n\n\nDistributionNormality TestANOVA\n\n\n\n\n\n\ndf_combined %>%\n\ngroup_by(ageGroup) %>%\n\nshapiro_test(joviality) %>%\n\nungroup() %>%\n\nkbl() %>%\n\nkable_styling(full_width = F, bootstrap_options = \"responsive\")\n\n\n\n \n  \n    ageGroup \n    variable \n    statistic \n    p \n  \n \n\n  \n    18-29 \n    joviality \n    0.9502827 \n    1e-07 \n  \n  \n    30-39 \n    joviality \n    0.9384257 \n    0e+00 \n  \n  \n    40-50 \n    joviality \n    0.9526016 \n    2e-07 \n  \n  \n    51-60 \n    joviality \n    0.9519616 \n    6e-07 \n  \n\n\n\n\n\nSince the p-value across each age group is < 0.05, we reject the null hypothesis, concluding that joviality does not follow a normal distribution across age groups either. To test if there is a significant difference between groups, a non-parametric test will be used in subsequent analysis.\n\n\nA non-parametric Kruskal-Wallis one-way ANOVA test is conducted to determine if there is a significant difference in mean joviality score between age groups. At a significance level of 0.05, we test the following hypothesis:\n$ $H_0: There is no difference in mu between age groups $ $\n$ $H_0: There is a difference in mu between two or more age groups $ $\nThe p-value 0.08 is > significant level of 0.05, so we conclude that * there is no significant difference in mean joviality score across age groups. *\n\n\n\nWhile the one-way ANOVA tests reported significant differences in joviality between income groups and not age groups, there are still trends that can be observed when comparing multiple groups and factor levels. This gives more specific insight into demographic patterns, as visualised in the following chart that compares joviality score across both Age and Income groups:\n\n#  | warning: false\n\n  # Calculate mean joviality per tile\n\ngbcols   <- c(\"ageGroup\", \"incomeGroup\")\n\ncal_joviality   <- df_combined %>%\n\ngroup_by(across(all_of(gbcols))) %>%\n\nsummarise(mean_joviality = round(mean(joviality),2), .groups = \"drop\") %>%\n\nungroup()\n\n  # Style tooltip\n\ntooltip_css   <- \"background-color:#3E4254; font-style:bold; color:#F8F3E6;\"\n\n  # Tile Plot\n\ngg_tile <-ggplot(cal_joviality,\n\naes(x = ageGroup, y = incomeGroup)) +\n\ngeom_tile_interactive(aes(fill = mean_joviality,\n\ntooltip = paste(\"Age Group: \", ageGroup, \"  <br>\",\n\n\"Income Group: \", incomeGroup, \"  <br >\",\n\n\"Mean Joviality Score: \", mean_joviality))) +\n\nscale_fill_gradient(low = \"#0a4c6a\",\n\nhigh = \"#F8F3E6\",\n\nspace = \"Lab\",\n\nna.value = \"grey50\",\n\nguide = \"colourbar\",\n\naesthetics = \"fill\") +\n\nlabs(title = \"Joviality across Income and Age Groups\",\n\nx = \"Age Group\",\n\ny = \"Income Group\") +\n\ntheme(legend.position = \"right\",\n\nlegend.direction = \"vertical\",\n\naxis.line.x = element_blank(),\n\npanel.grid.major.y = element_blank()) +\n\n\n\ntheme(plot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\nggiraph::girafe(ggobj = gg_tile,\n\nwidth_svg = 6,\n\nheight_svg = 6  *0.618,\n\nfonts = list(sans = \"Lato Regular\"),\n\noptions = list(opts_tooltip(css = tooltip_css)))\n\n\n\n\n\n\n\nDesign Considerations *\nA heatmap was selected to visualise two categorical variables with tiles filled by the value of"
  },
  {
    "objectID": "Takehome Exercise/Takehome Ex 4/1.html#age",
    "href": "Takehome Exercise/Takehome Ex 4/1.html#age",
    "title": "ISSS608-VAA",
    "section": "3.2 Age:",
    "text": "3.2 Age:\n`{r}\n`\nWhat is the mean amount of transactions in each category across all participants?\n\ncat_amount   <- financial_data_new %>%\n\ngroup_by(category) %>%\n\nsummarise(amount = mean(amount)) %>%\n\nungroup()\n\nggplot(cat_amount, aes(x = amount, y = category)) +\n\ngeom_bar(stat = \"identity\",\n\naes(fill = ifelse(amount   < 0, \"Negative\", \"Positive\"))) +\n\ngeom_text(aes(label = paste0(ifelse(amount   < 0, \"-  $\", \"  $\"), abs(round(amount, 2)))),\n\nvjust = -3, hjust = 0.5) +\n\nscale_fill_manual(name = \"Values\",\n\nvalues = c(\"Positive\" = \"#1696d2\", \"Negative\" = \"salmon\")) +\n\nlabs(x = \" Mean Amount ($)\") +\n\ntheme(axis.title.y = element_blank(),\n\nlegend.position = \"none\",\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))\n\n\n\n\n\nggplot(financial_agg, aes(x = incomeGroup,\n\ny = expenseRatio)) +\n\ngeom_boxplot() +\n\nlabs(title = \"Expense Ratio is Higher in Middle Income Groups\",\n\nx = NULL,\n\ny = NULL) +\n\ntheme(text = element_text(size = 12),\n\nplot.background = element_rect(fill=\"#F8F3E6\",colour=\"#F8F3E6\"))"
  }
]